{"task":"Numeric validation of hypergeometric product formula vs generating-functional","priority":"High","depends_on":"C:\\Users\\%USERNAME%\\Code\\asciimath\\su2-3nj-generating-functional\\VnV-TODO.ndson","python_snippet":"import sympy as sp\nfrom project.su2_3nj_generating_functional import generate_3nj\nfrom project.su2_3nj_product_formula import product_formula_3nj\n# test sample j values\nfor js in [(1,1,1,1,1,1),(2,2,2,2,2,2),(1,2,3,4,5,6)]:\n    num = generate_3nj(*js)\n    pf  = product_formula_3nj(*js)\n    assert sp.simplify(num - pf) == 0, f\"Mismatch generating vs product formula for {js}\""}
{"task":"Numeric validation of hypergeometric product formula vs uniform closed-form","priority":"High","depends_on":"C:\\Users\\%USERNAME%\\Code\\asciimath\\su2-3nj-uniform-closed-form\\VnV-TODO.ndson","python_snippet":"import sympy as sp\nfrom project.su2_3nj_uniform_closed_form import closed_form_3nj\nfrom project.su2_3nj_product_formula import product_formula_3nj\nfor js in [(1,1,1,1,1,1),(2,2,2,2,2,2)]:\n    cf = closed_form_3nj(*js)\n    pf = product_formula_3nj(*js)\n    assert sp.simplify(cf - pf) == 0, f\"Mismatch closed-form vs product formula for {js}\""}
{"task":"Numeric validation of hypergeometric product formula vs finite recurrences","priority":"High","depends_on":"C:\\Users\\%USERNAME%\\Code\\asciimath\\su2-3nj-recurrences\\VnV-TODO.ndson","python_snippet":"import sympy as sp\nfrom project.su2_3nj_recurrences import recurrence_3nj\nfrom project.su2_3nj_product_formula import product_formula_3nj\nfor js in [(1,1,1,1,1,1),(3,3,3,3,3,3)]:\n    rec = recurrence_3nj(*js)\n    pf  = product_formula_3nj(*js)\n    assert sp.simplify(rec - pf) == 0, f\"Mismatch recurrences vs product formula for {js}\""}
{"task":"Regression test for hypergeometric product formula against reference data","priority":"Medium","python_snippet":"import json\nfrom project.su2_3nj_product_formula import product_formula_3nj\nwith open('tests/reference_3nj_product_formula.json') as f:\n    ref = json.load(f)\nfor key, val in ref.items():\n    js = tuple(map(int, key.split(',')))\n    assert product_formula_3nj(*js) == val, f\"Reference mismatch for {js}\""}
{"task":"Symmetry checks for product formula under index permutations","priority":"Medium","python_snippet":"import sympy as sp\nfrom project.su2_3nj_product_formula import product_formula_3nj\njs = [1,2,3,4,5,6]\na = product_formula_3nj(*js)\nb = product_formula_3nj(js[1],js[0],js[2],js[3],js[5],js[4])\nassert sp.simplify(a - b) == 0, \"Product formula fails basic permutation symmetry\""}
{"task":"Domain validation of hypergeometric parameters in product formula","priority":"Low","python_snippet":"from project.su2_3nj_product_formula import product_formula_3nj\n# test integer and half-integer boundaries\ncases = [(i/2 for i in (0,1,2))]*6\nfor js in [(i,j,k,l,m,n) for i in (0,0.5,1) for j in (0,0.5,1) for k in (0,0.5,1) for l in (0,0.5,1) for m in (0,0.5,1) for n in (0,0.5,1)]:\n    try:\n        product_formula_3nj(*js)\n    except Exception as e:\n        assert False, f\"Domain error for {js}: {e}\""}
{"task":"Performance benchmark of product formula vs generating-functional","priority":"Medium","depends_on":"C:\\Users\\%USERNAME%\\Code\\asciimath\\su2-3nj-generating-functional\\VnV-TODO.ndson","python_snippet":"import time\nfrom project.su2_3nj_generating_functional import generate_3nj\nfrom project.su2_3nj_product_formula import product_formula_3nj\njs = (10,10,10,10,10,10)\nt0 = time.time(); generate_3nj(*js); t1 = time.time()-t0\nt0 = time.time(); product_formula_3nj(*js); t2 = time.time()-t0\nassert t2 < t1, f\"Product formula slower ({t2:.4f}s) >= generating ({t1:.4f}s)\""}
